#!/bin/bash

DEVICE=laurel_sprout
TG_USERNAME=@HemantSachdeva
cd /tmp/rom # Depends on where source got synced

# SHRP uses python2 so using it in virtualenv will avoid syntax errors
sudo apt-get -y update
sudo apt-get -y install \
python2 \
python-pip-whl \
python3-virtualenv \
virtualenv
virtualenv -p /usr/bin/python2.7 xyz && source xyz/bin/activate

# Normal build steps
. build/envsetup.sh
lunch omni_$DEVICE-eng
export CCACHE_DIR=/tmp/ccache
export CCACHE_EXEC=$(which ccache)
export USE_CCACHE=1
ccache -M 20G
ccache -o compression=true
ccache -z

# Telgram env setup
export BOT_MSG_URL="https://api.telegram.org/bot$API_BOT/sendMessage"
export BOT_BUILD_URL="https://api.telegram.org/bot$API_BOT/sendDocument"

tg_post_msg() {
        curl -s -X POST "$BOT_MSG_URL" -d chat_id="$2" \
        -d "parse_mode=html" \
        -d text="$1"
}

tg_error_msg() {
        curl -s -X POST "$BOT_MSG_URL" -d chat_id="$2" \
        -d "parse_mode=html" \
        -d text="$1" \
        -d log_file="$3"
}

# stuffs
up(){
	curl --upload-file $1 https://transfer.sh/
}

make_shrp(){
	mka recoveryimage
	if [ -f out/target/product/$DEVICE/SHRP_v*zip ]; then
		zip=$(up out/target/product/$DEVICE/SHRP_v*zip)
		addon=$(up out/target/product/$DEVICE/SHRP_AddonRescue_v*zip)
		img=$(up out/target/product/$DEVICE/recovery.img)
		echo " "
		echo "$zip"
		tg_post_msg "<b>$TG_USERNAME Build Completed</b>%0A%0A<b>Link : </b> <code>"$zip"</code>" "$CHATID"
		tg_post_msg "<b>Addon Zip</b>%0A%0A<b>Link : </b> <code>"$addon"</code>" "$CHATID"
		tg_post_msg "<b>Recovery IMG</b>%0A%0A<b>Link : </b> <code>"$img"</code>" "$CHATID"
	else
		tg_error_msg "<b>$TG_USERNAME Build Failed, check cirrus ci</b>" "$CHATID" "$LOGS"
	fi
}

make_shrp
